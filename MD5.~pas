///////////////////////////////////////////////////////////////////////////////
                         //MD5 DEMO V1.0//
                          //作者：ksaiy//
//欢迎使用由ksaiy制作的MD5加密算法演示程序，此算法为标准的MD5算法，你可以根据的
//的自己需要进行变形。具体怎么操作可以登录我们的网站查询详细的资料。我们专门为软
//件开发者提供软件加密安全测试服务和软件加密解决方案，具体的可以参看我们的网站上
//的资料。我们的网站：http://www.ksaiy.com  http://www.magicoa.com
//技术支持:ksaiy@sina.com 在线QQ：40188696 UC：934155
                            //End //

                  //注意：转载请保留以上信息。//
///////////////////////////////////////////////////////////////////////////////

unit MD5;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls,
  Dialogs, StdCtrls,kys_type;

type
  MD5Count = array[0..1] of cardinal;
  MD5State = array[0..3] of cardinal;
  MD5Block = array[0..15] of cardinal;
  MD5CBits = array[0..7] of Byte;
  MD5Digest = array[0..15] of Byte;
  MD5Buffer = array[0..63] of Byte;
  MD5Context = record
    State: MD5State;
    Count: MD5Count;
    Buffer: MD5Buffer;
  end;





var
  PADDING: MD5Buffer = (
		$80, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00,
		$00, $00, $00, $00, $00, $00, $00, $00);

function F(x, y, z: cardinal): cardinal;
function G(x, y, z: cardinal): cardinal;
function H(x, y, z: cardinal): cardinal;
function I(x, y, z: cardinal): cardinal;
procedure rot(var x: cardinal; n: BYTE);
procedure FF(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
procedure GG(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
procedure HH(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
procedure II(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
procedure Encode(Source, Target: pointer; Count: longword);
procedure Decode(Source, Target: pointer; Count: longword);
procedure Transform(Buffer: pointer; var State: MD5State);

procedure MD5Init(var Context: MD5Context);
procedure MD5Update(var Context: MD5Context;savedata:Tsave); overload;
procedure MD5Update(var Context: MD5Context; Input: system.pChar; Length: longword); overload;
procedure MD5Final(var Context: MD5Context; var Digest: MD5Digest);
function MD5String(savedata:Tsave): MD5Digest;
function MD5Print(D: MD5Digest): ansistring;
function MD5Match(D1, D2: MD5Digest): boolean;
function getMD5HashString(savedata:Tsave): ansistring;
implementation

function F(x, y, z: cardinal): cardinal;
var
  tmp,tmp1:cardinal;
begin
  tmp:=x and y;
  tmp1:=not x;
  tmp1:=tmp1 and z;
  result:=tmp or tmp1;

	//Result := (x and y) or ((not x) and z);
end;

function G(x, y, z: cardinal): cardinal;
begin
	Result := (x and z) or (y and (not z));
end;

function H(x, y, z: cardinal): cardinal;
begin
	Result := x xor y xor z;
end;

function I(x, y, z: cardinal): cardinal;
begin
	Result := y xor (x or (not z));
end;

procedure rot(var x: cardinal; n: BYTE);
var
  tmp,tmp1:cardinal;
begin
	tmp := x shl n;
  tmp1:=32-n;
  tmp1:=x shr tmp1;
  x:= tmp or tmp1
  //x:=(x shl n) or (x shr (32 - n));


end;

procedure FF(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
var
  tmp:cardinal;
begin
  tmp:= F(b, c, d);
  tmp:=tmp+x;
  tmp:=tmp+ac;
	a:=a+tmp;
	rot(a, s);
	tmp:=a+b;
end;

procedure GG(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
begin
	inc(a, G(b, c, d) + x + ac);
	rot(a, s);
	inc(a, b);
end;

procedure HH(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
begin
	inc(a, H(b, c, d) + x + ac);
	rot(a, s);
	inc(a, b);
end;

procedure II(var a: cardinal; b, c, d, x: cardinal; s: BYTE; ac: cardinal);
begin
	inc(a, I(b, c, d) + x + ac);
	rot(a, s);
	inc(a, b);
end;

procedure Encode(Source, Target: pointer; Count: longword);
var
	S: PByte;
	T: PDWORD;
	I: longword;
begin
	S := Source;
	T := Target;
	for I := 1 to Count div 4 do begin
		T^ := S^;
		inc(S);
		T^ := T^ or (S^ shl 8);
		inc(S);
		T^ := T^ or (S^ shl 16);
		inc(S);
		T^ := T^ or (S^ shl 24);
		inc(S);
		inc(T);
	end;
end;

procedure Decode(Source, Target: pointer; Count: longword);
var
	S: PDWORD;
	T: PByte;
	I: longword;
begin
	S := Source;
	T := Target;
	for I := 1 to Count do begin
		T^ := S^ and $ff;
		inc(T);
		T^ := (S^ shr 8) and $ff;
		inc(T);
		T^ := (S^ shr 16) and $ff;
		inc(T);
		T^ := (S^ shr 24) and $ff;
		inc(T);
		inc(S);
	end;
end;

procedure Transform(Buffer: pointer; var State: MD5State);
var
	a, b, c, d: cardinal;
	Block: MD5Block;
begin

	Encode(Buffer, @Block, 64);
	a := State[0];
	b := State[1];
	c := State[2];
	d := State[3];
	FF (a, b, c, d, Block[ 0],  7, $076aa478);
	FF (d, a, b, c, Block[ 1], 12, $08c7b756);
	FF (c, d, a, b, Block[ 2], 17, $042070db);
	FF (b, c, d, a, Block[ 3], 22, $01bdceee);
	FF (a, b, c, d, Block[ 4],  7, $057c0faf);
	FF (d, a, b, c, Block[ 5], 12, $0787c62a);
	FF (c, d, a, b, Block[ 6], 17, $08304613);
	FF (b, c, d, a, Block[ 7], 22, $0d469501);
	FF (a, b, c, d, Block[ 8],  7, $098098d8);
	FF (d, a, b, c, Block[ 9], 12, $0b44f7af);
	FF (c, d, a, b, Block[10], 17, $0fff5bb1);
	FF (b, c, d, a, Block[11], 22, $095cd7be);
	FF (a, b, c, d, Block[12],  7, $0b901122);
	FF (d, a, b, c, Block[13], 12, $0d987193);
	FF (c, d, a, b, Block[14], 17, $0679438e);
	FF (b, c, d, a, Block[15], 22, $09b40821);
	GG (a, b, c, d, Block[ 1],  5, $061e2562);
	GG (d, a, b, c, Block[ 6],  9, $0040b340);
	GG (c, d, a, b, Block[11], 14, $065e5a51);
	GG (b, c, d, a, Block[ 0], 20, $09b6c7aa);
	GG (a, b, c, d, Block[ 5],  5, $062f105d);
	GG (d, a, b, c, Block[10],  9,  $0441453);
	GG (c, d, a, b, Block[15], 14, $08a1e681);
	GG (b, c, d, a, Block[ 4], 20, $07d3fbc8);
	GG (a, b, c, d, Block[ 9],  5, $01e1cde6);
	GG (d, a, b, c, Block[14],  9, $033707d6);
	GG (c, d, a, b, Block[ 3], 14, $04d50d87);
	GG (b, c, d, a, Block[ 8], 20, $055a14ed);
	GG (a, b, c, d, Block[13],  5, $09e3e905);
	GG (d, a, b, c, Block[ 2],  9, $0cefa3f8);
	GG (c, d, a, b, Block[ 7], 14, $076f02d9);
	GG (b, c, d, a, Block[12], 20, $0d2a4c8a);
	HH (a, b, c, d, Block[ 5],  4, $0ffa3942);
	HH (d, a, b, c, Block[ 8], 11, $0771f681);
	HH (c, d, a, b, Block[11], 16, $0d9d6122);
	HH (b, c, d, a, Block[14], 23, $0de5380c);
	HH (a, b, c, d, Block[ 1],  4, $04beea44);
	HH (d, a, b, c, Block[ 4], 11, $0bdecfa9);
	HH (c, d, a, b, Block[ 7], 16, $06bb4b60);
	HH (b, c, d, a, Block[10], 23, $0ebfbc70);
	HH (a, b, c, d, Block[13],  4, $089b7ec6);
	HH (d, a, b, c, Block[ 0], 11, $0aa127fa);
	HH (c, d, a, b, Block[ 3], 16, $04ef3085);
	HH (b, c, d, a, Block[ 6], 23,  $4881d05);
	HH (a, b, c, d, Block[ 9],  4, $09d4d039);
	HH (d, a, b, c, Block[12], 11, $06db99e5);
	HH (c, d, a, b, Block[15], 16, $0fa27cf8);
	HH (b, c, d, a, Block[ 2], 23, $04ac5665);
	II (a, b, c, d, Block[ 0],  6, $04292244);
	II (d, a, b, c, Block[ 7], 10, $032aff97);
	II (c, d, a, b, Block[14], 15, $0b9423a7);
	II (b, c, d, a, Block[ 5], 21, $0c93a039);
	II (a, b, c, d, Block[12],  6, $055b59c3);
	II (d, a, b, c, Block[ 3], 10, $0f0ccc92);
	II (c, d, a, b, Block[10], 15, $0feff47d);
	II (b, c, d, a, Block[ 1], 21, $05845dd1);
	II (a, b, c, d, Block[ 8],  6, $0fa87e4f);
	II (d, a, b, c, Block[15], 10, $0e2ce6e0);
	II (c, d, a, b, Block[ 6], 15, $03014314);
	II (b, c, d, a, Block[13], 21, $0e0811a1);
	II (a, b, c, d, Block[ 4],  6, $07537e82);
	II (d, a, b, c, Block[11], 10, $0d3af235);
	II (c, d, a, b, Block[ 2], 15, $0ad7d2bb);
	II (b, c, d, a, Block[ 9], 21, $0b86d391);
  {FF (a, b, c, d, Block[ 0],  7, $d76aa478);
	FF (d, a, b, c, Block[ 1], 12, $e8c7b756);
	FF (c, d, a, b, Block[ 2], 17, $242070db);
	FF (b, c, d, a, Block[ 3], 22, $c1bdceee);
	FF (a, b, c, d, Block[ 4],  7, $f57c0faf);
	FF (d, a, b, c, Block[ 5], 12, $4787c62a);
	FF (c, d, a, b, Block[ 6], 17, $a8304613);
	FF (b, c, d, a, Block[ 7], 22, $fd469501);
	FF (a, b, c, d, Block[ 8],  7, $698098d8);
	FF (d, a, b, c, Block[ 9], 12, $8b44f7af);
	FF (c, d, a, b, Block[10], 17, $ffff5bb1);
	FF (b, c, d, a, Block[11], 22, $895cd7be);
	FF (a, b, c, d, Block[12],  7, $6b901122);
	FF (d, a, b, c, Block[13], 12, $fd987193);
	FF (c, d, a, b, Block[14], 17, $a679438e);
	FF (b, c, d, a, Block[15], 22, $49b40821);
	GG (a, b, c, d, Block[ 1],  5, $f61e2562);
	GG (d, a, b, c, Block[ 6],  9, $c040b340);
	GG (c, d, a, b, Block[11], 14, $265e5a51);
	GG (b, c, d, a, Block[ 0], 20, $e9b6c7aa);
	GG (a, b, c, d, Block[ 5],  5, $d62f105d);
	GG (d, a, b, c, Block[10],  9,  $2441453);
	GG (c, d, a, b, Block[15], 14, $d8a1e681);
	GG (b, c, d, a, Block[ 4], 20, $e7d3fbc8);
	GG (a, b, c, d, Block[ 9],  5, $21e1cde6);
	GG (d, a, b, c, Block[14],  9, $c33707d6);
	GG (c, d, a, b, Block[ 3], 14, $f4d50d87);
	GG (b, c, d, a, Block[ 8], 20, $455a14ed);
	GG (a, b, c, d, Block[13],  5, $a9e3e905);
	GG (d, a, b, c, Block[ 2],  9, $fcefa3f8);
	GG (c, d, a, b, Block[ 7], 14, $676f02d9);
	GG (b, c, d, a, Block[12], 20, $8d2a4c8a);
	HH (a, b, c, d, Block[ 5],  4, $fffa3942);
	HH (d, a, b, c, Block[ 8], 11, $8771f681);
	HH (c, d, a, b, Block[11], 16, $6d9d6122);
	HH (b, c, d, a, Block[14], 23, $fde5380c);
	HH (a, b, c, d, Block[ 1],  4, $a4beea44);
	HH (d, a, b, c, Block[ 4], 11, $4bdecfa9);
	HH (c, d, a, b, Block[ 7], 16, $f6bb4b60);
	HH (b, c, d, a, Block[10], 23, $bebfbc70);
	HH (a, b, c, d, Block[13],  4, $289b7ec6);
	HH (d, a, b, c, Block[ 0], 11, $eaa127fa);
	HH (c, d, a, b, Block[ 3], 16, $d4ef3085);
	HH (b, c, d, a, Block[ 6], 23,  $4881d05);
	HH (a, b, c, d, Block[ 9],  4, $d9d4d039);
	HH (d, a, b, c, Block[12], 11, $e6db99e5);
	HH (c, d, a, b, Block[15], 16, $1fa27cf8);
	HH (b, c, d, a, Block[ 2], 23, $c4ac5665);
	II (a, b, c, d, Block[ 0],  6, $f4292244);
	II (d, a, b, c, Block[ 7], 10, $432aff97);
	II (c, d, a, b, Block[14], 15, $ab9423a7);
	II (b, c, d, a, Block[ 5], 21, $fc93a039);
	II (a, b, c, d, Block[12],  6, $655b59c3);
	II (d, a, b, c, Block[ 3], 10, $8f0ccc92);
	II (c, d, a, b, Block[10], 15, $ffeff47d);
	II (b, c, d, a, Block[ 1], 21, $85845dd1);
	II (a, b, c, d, Block[ 8],  6, $6fa87e4f);
	II (d, a, b, c, Block[15], 10, $fe2ce6e0);
	II (c, d, a, b, Block[ 6], 15, $a3014314);
	II (b, c, d, a, Block[13], 21, $4e0811a1);
	II (a, b, c, d, Block[ 4],  6, $f7537e82);
	II (d, a, b, c, Block[11], 10, $bd3af235);
	II (c, d, a, b, Block[ 2], 15, $2ad7d2bb);
	II (b, c, d, a, Block[ 9], 21, $eb86d391);  }
	inc(State[0], a);
	inc(State[1], b);
	inc(State[2], c);
	inc(State[3], d);
end;

procedure MD5Init(var Context: MD5Context);
begin
	with Context do begin
		{State[0] := $67452301;
		State[1] := $efcdab89;
		State[2] := $98badcfe;
		State[3] := $10325476;}
    State[0] := $07452301;
		State[1] := $0fcdab89;
		State[2] := $08badcfe;
		State[3] := $0325476;
		Count[0] := 0;
		Count[1] := 0;
		ZeroMemory(@Buffer, SizeOf(MD5Buffer));
	end;
end;

procedure MD5Update(var Context: MD5Context;savedata:Tsave); overload;
var
	Index: longword;
	PartLen: longword;
	I: longword;
begin
	with Context do begin
		Index := (Count[0] shr 3) and $3f;
		inc(Count[0], savedata.len shl 3);
		if Count[0] < (savedata.len shl 3) then inc(Count[1]);
		inc(Count[1], savedata.len shr 29);
	end;
	PartLen := 64 - Index;
	if savedata.len >= PartLen then begin
    CopyMemory(@Context.Buffer[Index], @savedata.a, PartLen);
		Transform(@Context.Buffer, Context.State);
		I := PartLen;
		while I + 63 < savedata.len do
    begin
      Transform(@savedata.a[i], Context.State);
			inc(I, 64);
		end;
		Index := 0;
	end else I := 0;
  CopyMemory(@Context.Buffer[Index], @savedata.a[I], savedata.len - I);
end;
procedure MD5Update(var Context: MD5Context; Input: pChar; Length: longword); overload;
var
	Index: longword;
	PartLen: longword;
	I: longword;
begin
	with Context do begin
		Index := (Count[0] shr 3) and $3f;
		inc(Count[0], Length shl 3);
		if Count[0] < (Length shl 3) then inc(Count[1]);
		inc(Count[1], Length shr 29);
	end;
	PartLen := 64 - Index;
	if Length >= PartLen then begin
		CopyMemory(@Context.Buffer[Index], Input, PartLen);
		Transform(@Context.Buffer, Context.State);
		I := PartLen;
		while I + 63 < Length do 
    begin
			Transform(@Input[I], Context.State);
			inc(I, 64);
		end;
		Index := 0;
	end else I := 0;
	CopyMemory(@Context.Buffer[Index], @Input[I], Length - I);
end;
procedure MD5Final(var Context: MD5Context; var Digest: MD5Digest);
var
	Bits: MD5CBits;
	Index: longword;
	PadLen: longword;
begin
	Decode(@Context.Count, @Bits, 2);
	Index := (Context.Count[0] shr 3) and $3f;
	if Index < 56 then PadLen := 56 - Index else PadLen := 120 - Index;
	MD5Update(Context, @PADDING, PadLen);
	MD5Update(Context, @Bits, 8);
	Decode(@Context.State, @Digest, 4);
	ZeroMemory(@Context, SizeOf(MD5Context));
end;

function MD5String(savedata:Tsave): MD5Digest;
var
	Context: MD5Context;
begin
	MD5Init(Context);
	MD5Update(Context,savedata);
	MD5Final(Context, Result);
end;

function MD5Print(D: MD5Digest): ansistring;
var
	I: byte;
const
	Digits: array[0..15] of char =
		('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
begin
	Result := '';
	for I := 0 to 15 do Result := Result + Digits[(D[I] shr 4) and $0f] + Digits[D[I] and $0f];
end;

function MD5Match(D1, D2: MD5Digest): boolean;
var
	I: byte;
begin
	I := 0;
	Result := TRUE;
	while Result and (I < 16) do begin
		Result := D1[I] = D2[I];
		inc(I);
	end;
end;

function getMD5HashString(savedata:Tsave): ansistring;

begin
  Result := MD5Print(MD5String(savedata));
end;


end.

